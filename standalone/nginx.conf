worker_processes auto;
rtmp_auto_push on;
events {
    worker_connections 1024;
}
rtmp {
    server {
        listen 1935;
        listen [::]:1935 ipv6only=on;
        chunk_size 4096;
        buflen 10s;
        drop_idle_publisher 10s;

        # To enable HLS
        hls on;
        hls_fragment 4s;
        hls_playlist_length 5m;
        hls_type event;
        # hls_fragment_slicing aligned;
        # hls_continuous on;

        record_path /tmp/rec;

        application live {
            live on;
            interleave on;

            record off;

            hls_cleanup on;
            hls_path /tmp/raw;

            pull rtmp://demo.streamplanet.tv/live name=test static;

            exec_publish bash /var/scripts/src/push_hls.sh $name;
            exec_record_done bash /var/scripts/src/on_record_done.sh $path $dirname/$basename;
        }

        application task {
            live on;
            interleave on;

            record off;

            hls_path /tmp/hls;
            hls_cleanup on;
            hls_nested on;

            hls_variant _low AVERAGE-BANDWIDTH=1200000,BANDWIDTH=1280000,RESOLUTION=852x480,CLOSED-CAPTIONS=NONE;
            hls_variant _mid AVERAGE-BANDWIDTH=2710000,BANDWIDTH=2560000,RESOLUTION=1280x720,CLOSED-CAPTIONS=NONE;
            hls_variant _hi AVERAGE-BANDWIDTH=4170000,BANDWIDTH=5210000,RESOLUTION=1920x1080,CLOSED-CAPTIONS=NONE;

            exec_publish bash /var/scripts/task/on_publish.sh $name;
        }
    }
}

http {
    # include mime.types;
    # See http://licson.net/post/optimizing-nginx-for-large-file-delivery/ for more detail
    # This optimizes the server for HLS fragment delivery
    sendfile off;
    tcp_nopush on;
    directio 512;

    # HTTP Server for the video fragments
    server {
        listen 8000;
        location /control {
            rtmp_control all;
        }
        location / {
            types {
                application/vnd.apple.mpegurl m3u8;
            }
            root /tmp;
            add_header 'Cache-Control' 'no-cache';
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
            add_header 'Access-Control-Allow-Headers' 'Range';
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Headers' 'Range';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
    }
}